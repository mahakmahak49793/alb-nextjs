// app/kundli/details/[id]/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { kundliApis } from '@/lib/api/kundliApi';
import {
  KundliBasicData,
  KundliPayload,
  CompleteKundliData,
  ApiPayload,
} from '@/types/kundliTypes/BirthChartTypes';

// Component Imports
import TopHeaderSection from '@/components/common/TopHeaderSection';
import BirthDetail from '@/components/kundli/BirthDetail';
import AstroDetail from '@/components/kundli/AstroDetail';
import NavamanshaChart from '@/components/kundli/NavamanshaChart';
import PlanetaryPosition from '@/components/kundli/PlanetaryPosition';
import LagnaChart from '@/components/kundli/LaganaChart';
import SadheSati from '@/components/kundli/SadheSati';
import KaalsarpDosha from '@/components/kundli/KaalsarpDosha';
import MangalDosha from '@/components/kundli/MangalDosha';
import PitriDosha from '@/components/kundli/PitraDosha';
import VimshottariDasha from '@/components/kundli/DashaSection';
import YoginiDasha from '@/components/kundli/YoginiDasha';
import JaiminiDetails from '@/components/kundli/JaiminiDetails';
import CharDasha from '@/components/kundli/CharDasha';
import ChalitChart from '@/components/kundli/ChalitChart';
import MoonChart from '@/components/kundli/MoonChart';
import HoraChart from '@/components/kundli/HoraChart';
import SunChart from '@/components/kundli/SunChart';
import DreshkanChart from '@/components/kundli/DreshkanChart';
import DashamanshaChart from '@/components/kundli/DashaManshaChart';
import DwadasmanshaChart from '@/components/kundli/DwadasmanshaChart';
import TrishamanshaChart from '@/components/kundli/TrishamanshaChart';
import ShashtymanshaChart from '@/components/kundli/ShashtymanshaChart';
import AshtakVarga from '@/components/kundli/AshtakVarga';
import Sarvashtak from '@/components/kundli/Sarvashtak';
import KPBirthDetail from '@/components/kundli/KPBirthDetail';
import KPPlanetaryPosition from '@/components/kundli/KPPlanetaryPosition';
import KPCuspsDetail from '@/components/kundli/KPCuspsDetail';
import KPBirthChart from '@/components/kundli/KPBirthChart';
import KPCuspsChart from '@/components/kundli/KPCuspsChart';
import KPPlanetSignificators from '@/components/kundli/KPPlanetSignificators';
import KPRulingPlanets from '@/components/kundli/KPRulingPlanets';
import KPHouseSignificators from '@/components/kundli/KPHouseSignificators';
import AscendantPrediction from '@/components/kundli/AscendantPrediction';
import SignPrediction from '@/components/kundli/SignPrediction';
import PlanetConsideration from '@/components/kundli/PlanetConsideration';
import BhavPrediction from '@/components/kundli/BhavPrediction';
import NakshatraPrediction from '@/components/kundli/NakshatraPrediction';

// Menu Data
const menuData = [
  {
    title: "Basic Details",
    items: [
      { label: "Birth Details", name: "birth-details" },
      { label: "Astro Details", name: "astro-details" },
    ]
  },
  {
    title: "Kundli",
    items: [
      { label: "Lagna Chart", name: "lagna-chart" },
      { label: "Navamansha Chart", name: "navamansha-chart" },
      { label: "Planetary Positions", name: "planetary-positions" }
    ]
  },
  {
    title: "Shodashvarga",
    items: [
      { label: "Lagna Chart", name: "lagna-chart" },
      { label: "Chalit Chart", name: "chalit-chart" },
      { label: "Moon Chart", name: "moon-chart" },
      { label: "Sun Chart", name: "sun-chart" },
      { label: "Hora Chart", name: "hora-chart" },
      { label: "Dreshkan Chart", name: "dreshkan-chart" },
      { label: "Navamansha Chart", name: "navamansha-chart" },
      { label: "Dashamansha Chart", name: "dashamansha-chart" },
      { label: "Dwadasmansha Chart", name: "dwadasmansha-chart" },
      { label: "Trishamansha Chart", name: "trishamansha-chart" },
      { label: "Shashtymansha Chart", name: "shashtymansha-chart" }
    ]
  },
  {
    title: "KP",
    items: [
      { label: "KP Birth Details", name: "kp-birth-details" },
      { label: "KP Planetary Positions", name: "kp-planetary-positions" },
      { label: "KP Cusps Details", name: "kp-cusps-details" },
      { label: "KP Birth Chart", name: "kp-birth-chart" },
      { label: "KP Cusps Chart", name: "kp-cusps-chart" },
      { label: "KP Planet Significators", name: "kp-planet-significators" },
      { label: "KP House Significators", name: "kp-house-significators" },
      { label: "KP Ruling Planets", name: "kp-ruling-planets" }
    ]
  },
  {
    title: "Jaimini",
    items: [
      { label: "Jaimini Details", name: "jaimini-details" },
      { label: "Char Dasha", name: "char-dasha" }
    ]
  },
  {
    title: "Dasha",
    items: [
      { label: "Vimshottari Dasha", name: "vimshottari-dasha" },
      { label: "Yogini Dasha", name: "yogini-dasha" }
    ]
  },
  {
    title: "Ashtakvarg",
    items: [
      { label: "Ashtak Varga/Bhinashtak", name: "ashtak-varga" },
      { label: "Sarvashtak", name: "sarvashtak" }
    ]
  },
  {
    title: "Dosha",
    items: [
      { label: "Mangal Dosha", name: "mangal-dosha" },
      { label: "Kaalsarp Dosha", name: "kaalsarp-dosha" },
      { label: "Pitra Dosha", name: "pitra-dosha" },
      { label: "Sadhe Sati", name: "sadhe-sati" }
    ]
  },
  {
    title: "Predictions",
    items: [
      { label: "Ascendant Prediction", name: "ascendant-prediction" },
      { label: "Sign Prediction", name: "sign-prediction" },
      { label: "Planet Consideration", name: "planet-consideration" },
      { label: "Bhav Prediction", name: "bhav-prediction" },
      { label: "Nakshatra Prediction", name: "nakshatra-prediction" }
    ]
  },
];

const KundliDetails = () => {
  const params = useParams();
  const kundliId = params.id as string;

  // Basic States
  const [loading, setLoading] = useState(true);
  const [loadingOtherData, setLoadingOtherData] = useState(true); // **NEW: Separate loading for other data**
  const [error, setError] = useState<string | null>(null);
  const [kundliData, setKundliData] = useState<KundliBasicData | null>(null);
  const [kundliPayload, setKundliPayload] = useState<KundliPayload | null>(null);

  // ✅ Single state object to store ALL kundli data
  const [allData, setAllData] = useState<CompleteKundliData>({});

  // Navigation states
  const [activeParent, setActiveParent] = useState('Basic Details');
  const [activeName, setActiveName] = useState('birth-details');

  // ==========================================
  // 🔹 HELPER FUNCTIONS
  // ==========================================

  const createApiPayload = (
  kundliData: KundliBasicData,
  kundliPayload: KundliPayload
): ApiPayload => {
  // Extract correct time from tob instead of using incorrect kundliPayload
  const tobDate = new Date(kundliData.tob);
  const dobDate = new Date(kundliData.dob);
  
  return {
    name: kundliData.name,
    day: String(dobDate.getUTCDate()),
    month: String(dobDate.getUTCMonth() + 1),
    year: String(dobDate.getUTCFullYear()),
    hour: String(tobDate.getUTCHours()).padStart(2, '0'), // Correctly extracts 13
    min: String(tobDate.getUTCMinutes()).padStart(2, '0'), // Correctly extracts 30
    latitude: String(kundliPayload.lat),
    longitude: String(kundliPayload.lon),
    timezone: String(kundliPayload.tzone),
    place: kundliData.place,
    gender: kundliData.gender,
  };
};

  const formatDateFromString = (dateStr: string) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'short',
      year: 'numeric',
    });
  };

const formatTimeFromString = (dateStr: string) => {
  // Remove the 'Z' and treat as local time
  const date = new Date(dateStr.replace('Z', ''));
  return date.toLocaleTimeString('en-IN', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: true,
  });
};

  const handleChildClick = (parent: string, name: string) => {
    setActiveParent(parent);
    setActiveName(name);
  };


  useEffect(() => {
    const fetchBasicDetails = async () => {
      setLoading(true);
      setError(null);

      try {
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/kundli/get_kundli_basic_details`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ kundliId }),
          }
        );

        const result = await response.json();

        if (result.success) {
          setKundliData(result.data);
          setKundliPayload(result.payload);
          
          // **STEP 1: Fetch Birth & Astro data FIRST**
          await fetchPriorityData(result.data, result.payload);
          
          // **STEP 2: Then fetch remaining data in background**
          fetchRemainingKundliData(result.data, result.payload);
        } else {
          setError('Failed to load kundli details.');
        }
      } catch (err) {
        console.error('❌ Error fetching basic details:', err);
        setError('Failed to load kundli details. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    if (kundliId) {
      fetchBasicDetails();
    }
  }, [kundliId]);

  // ==========================================
  // 🔹 FETCH PRIORITY DATA (Birth & Astro Details)
  // ==========================================

  const fetchPriorityData = async (
    kundliData: KundliBasicData,
    kundliPayload: KundliPayload
  ) => {
    const payload = createApiPayload(kundliData, kundliPayload);

    try {
      const [birthResult, astroResult] = await Promise.allSettled([
        kundliApis.getBirthData(payload),
        kundliApis.getAstroData(payload),
      ]);

      // **UPDATE STATE INCREMENTALLY - Use functional update**
      setAllData(prev => {
        const newData = { ...prev };
        
        if (birthResult.status === 'fulfilled' && birthResult.value?.birthdata) {
          newData.birthdata = birthResult.value.birthdata;
        }
        if (astroResult.status === 'fulfilled' && astroResult.value?.astrodata) {
          newData.astrodata = astroResult.value.astrodata;
        }

        return newData;
      });

      console.log('✅ Priority data loaded');
    } catch (err) {
      console.error('❌ Error fetching priority data:', err);
    }
  };

  // ==========================================
  // 🔹 FETCH REMAINING KUNDLI DATA PROGRESSIVELY
  // ==========================================

  const fetchRemainingKundliData = async (
    kundliData: KundliBasicData,
    kundliPayload: KundliPayload
  ) => {
    const payload = createApiPayload(kundliData, kundliPayload);

    try {
      // **Create array of API calls with their corresponding keys**
      const apiCalls = [
        { key: 'friendshipData', call: kundliApis.getFriendshipTable(payload), path: 'friendshipData' },
        { key: 'lagnaChart', call: kundliApis.getLagnaChart(payload), path: 'chartData' },
        { key: 'navamanshaChart', call: kundliApis.getNavamanshaChart(payload), path: 'chartData' },
        { key: 'chalitChart', call: kundliApis.getChalitChart(payload), path: 'chartData' },
        { key: 'moonChart', call: kundliApis.getMoonChart(payload), path: 'chartData' },
        { key: 'sunChart', call: kundliApis.getSunChart(payload), path: 'chartData' },
        { key: 'horaChart', call: kundliApis.getHoraChart(payload), path: 'chartData' },
        { key: 'dreshkanChart', call: kundliApis.getDreshkanChart(payload), path: 'chartData' },
        { key: 'dashamanshaChart', call: kundliApis.getDashamanshaChart(payload), path: 'chartData' },
        { key: 'dwadasmanshaChart', call: kundliApis.getDwadasmanshaChart(payload), path: 'chartData' },
        { key: 'trishamanshaChart', call: kundliApis.getTrishamanshaChart(payload), path: 'chartData' },
        { key: 'shashtymanshaChart', call: kundliApis.getShashtymanshaChart(payload), path: 'chartData' },
        { key: 'planetData', call: kundliApis.getPlanetaryPositions(payload), path: 'planetData' },
        { key: 'upgrahaData', call: kundliApis.getUpgraha(payload), path: 'upgrahaData' },
        { key: 'dashamBhavData', call: kundliApis.getDashamBhavMadhya(payload), path: 'dashamBhavData' },
        { key: 'prastarakListData', call: kundliApis.getAshtakVarga(payload), path: 'prastarakListData' },
        { key: 'sarvashtakaListData', call: kundliApis.getSarvashtak(payload), path: 'sarvashtakaListData' },
        { key: 'sadheSatiData', call: kundliApis.getSadheSati(payload), path: null },
        { key: 'mangalDosha', call: kundliApis.getMangalDosha(payload), path: 'mangalDosha' },
        { key: 'kaalsarpDosha', call: kundliApis.getKaalsarpDosha(payload), path: 'kaalsarpDosha' },
        { key: 'pitriDosha', call: kundliApis.getPitriDosha(payload), path: null },
        { key: 'vimshottaryMahaDashaData', call: kundliApis.getVimshottariMahaDasha(payload), path: 'vimshottaryMahaDashaData' },
        { key: 'vimshottaryCurrentDashaData', call: kundliApis.getVimshottariCurrentDasha(payload), path: 'vimshottaryCurrentDashaData' },
        { key: 'yoginiMahaDashaData', call: kundliApis.getYoginiMahaDasha(payload), path: 'yoginiMahaDashaData' },
        { key: 'yoginiCurrentDashaData', call: kundliApis.getYoginiCurrentDasha(payload), path: 'yoginiCurrentDashaData' },
        { key: 'karakaPlanetData', call: kundliApis.getJaiminiDetails(payload), path: 'karakaPlanetData' },
        { key: 'charDashaData', call: kundliApis.getCharDasha(payload), path: 'charDashaData' },
        { key: 'charCurrentDashaData', call: kundliApis.getCharCurrentDasha(payload), path: 'charCurrentDashaData' },
        { key: 'kpBirthdata', call: kundliApis.getKPBirthDetails(payload), path: 'birthdata' },
        { key: 'kpPlanetData', call: kundliApis.getKPPlanetaryPosition(payload), path: 'planetData' },
        { key: 'cuspsData', call: kundliApis.getKPCuspsDetail(payload), path: 'cuspsData' },
        { key: 'kpBirthChart', call: kundliApis.getKPBirthChart(payload), path: 'chartData' },
        { key: 'kpCuspsChart', call: kundliApis.getKPCuspsChart(payload), path: 'chartData' },
        { key: 'planetSignificatorsData', call: kundliApis.getKPPlanetSignificators(payload), path: 'planetSignificatorsData' },
        { key: 'houseSignificatorsData', call: kundliApis.getKPHouseSignificators(payload), path: 'houseSignificatorsData' },
        { key: 'rulingPlanetsData', call: kundliApis.getKPRulingPlanets(payload), path: 'rulingPlanetsData' },
        { key: 'numerlogy', call: kundliApis.getNumerologyDetails(payload), path: 'numerlogy' },
        { key: 'prediction', call: kundliApis.getPrediction(payload), path: 'prediction' },
      ];

      // **Fetch all APIs concurrently**
      const results = await Promise.allSettled(apiCalls.map(item => item.call));

      // **Process each result as it completes and update state incrementally**
      results.forEach((result, index) => {
        const { key, path } = apiCalls[index];
        
        if (result.status === 'fulfilled' && result.value) {
          // **Update state incrementally for each successful API call**
          setAllData(prev => ({
            ...prev,
            [key]: path ? result.value[path] : result.value
          }));
        }
      });

      console.log('✅ All remaining data loaded');
    } catch (err) {
      console.error('❌ Error fetching remaining kundli data:', err);
    }
  };

  // ==========================================
  // 🔹 RENDER CONTENT
  // ==========================================

  const renderContent = () => {
    if (loading) {
      return (
        <div className="flex flex-col items-center justify-center py-20">
          <div className="flex space-x-3 mb-4">
            <div className="w-4 h-4 bg-primary rounded-full animate-bounce"></div>
            <div className="w-4 h-4 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
            <div className="w-4 h-4 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
          </div>
          <p className="text-gray-600 text-sm">Loading kundli data...</p>
        </div>
      );
    }

    if (error) {
      return (
        <div className="bg-red-50 border border-red-200 rounded-lg p-8 text-center">
          <div className="text-5xl mb-4">⚠️</div>
          <h3 className="text-xl font-bold text-red-700 mb-2">Error</h3>
          <p className="text-red-600">{error}</p>
        </div>
      );
    }

    // ✅ Render based on allData - data appears as soon as it's available
    switch (activeName) {
      case 'birth-details':
        return allData.birthdata ? (
          <BirthDetail data={allData.birthdata} />
        ) : (
          <div className="flex flex-col items-center justify-center py-20">
            <div className="flex space-x-3 mb-4">
              <div className="w-4 h-4 bg-primary rounded-full animate-bounce"></div>
              <div className="w-4 h-4 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              <div className="w-4 h-4 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
            </div>
            <p className="text-gray-600 text-sm">Loading birth details...</p>
          </div>
        );

      case 'astro-details':
        return allData.astrodata ? (
          <AstroDetail data={allData.astrodata} />
        ) : (
          <div className="flex flex-col items-center justify-center py-20">
            <div className="flex space-x-3 mb-4">
              <div className="w-4 h-4 bg-primary rounded-full animate-bounce"></div>
              <div className="w-4 h-4 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              <div className="w-4 h-4 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
            </div>
            <p className="text-gray-600 text-sm">Loading astro details...</p>
          </div>
        );

      case 'lagna-chart':
        return allData.lagnaChart ? (
          <LagnaChart data={allData.lagnaChart} />
        ) : (
          <div className="text-center py-10 text-gray-500">Lagna chart not available</div>
        );

      case 'navamansha-chart':
        return allData.navamanshaChart ? (
          <NavamanshaChart data={allData.navamanshaChart} />
        ) : (
          <div className="text-center py-10 text-gray-500">Navamsha chart not available</div>
        );

      case 'planetary-positions':
        return allData.planetData ? (
          <PlanetaryPosition data={allData.planetData} />
        ) : (
          <div className="text-center py-10 text-gray-500">Planetary data not available</div>
        );

      case 'mangal-dosha':
        return allData.mangalDosha ? (
          <MangalDosha data={allData.mangalDosha} />
        ) : (
          <div className="text-center py-10 text-gray-500">Mangal Dosha data not available</div>
        );

      case 'kaalsarp-dosha':
        return allData.kaalsarpDosha ? (
          <KaalsarpDosha data={allData.kaalsarpDosha} />
        ) : (
          <div className="text-center py-10 text-gray-500">Kaalsarp Dosha data not available</div>
        );

      case 'pitra-dosha':
        return allData.pitriDosha ? (
          <PitriDosha data={allData.pitriDosha} />
        ) : (
          <div className="text-center py-10 text-gray-500">Pitra Dosha data not available</div>
        );

      case 'vimshottari-dasha':
        return (allData.vimshottaryMahaDashaData && allData.vimshottaryCurrentDashaData) ? (
          <VimshottariDasha
            mahaDashaData={allData.vimshottaryMahaDashaData}
            currentDashaData={allData.vimshottaryCurrentDashaData}
            apiPayload={createApiPayload(kundliData!, kundliPayload!)}
          />
        ) : (
          <div className="text-center py-10 text-gray-500">Dasha data not available</div>
        );

      case 'yogini-dasha':
        return (allData.yoginiMahaDashaData && allData.yoginiCurrentDashaData) ? (
          <YoginiDasha
            mahaDashaData={allData.yoginiMahaDashaData}
            currentDashaData={allData.yoginiCurrentDashaData}
            apiPayload={createApiPayload(kundliData!, kundliPayload!)}
          />
        ) : (
          <div className="text-center py-10 text-gray-500">Yogini Dasha data not available</div>
        );

      case 'jaimini-details':
        return allData.karakaPlanetData ? (
          <JaiminiDetails data={allData.karakaPlanetData} />
        ) : (
          <div className="text-center py-10 text-gray-500">Jaimini data not available</div>
        );

      case 'char-dasha':
        return (allData.charDashaData && allData.charCurrentDashaData) ? (
          <CharDasha
            charDashaData={allData.charDashaData}
            currentDashaData={allData.charCurrentDashaData}
          />
        ) : (
          <div className="text-center py-10 text-gray-500">Char Dasha data not available</div>
        );

        case 'chalit-chart':
          return allData.chalitChart ? (
            <ChalitChart data={allData.chalitChart} />
          ) : (
            <div className="text-center py-10 text-gray-500">Chalit chart not available</div>
          );

        case 'moon-chart':
          return allData.moonChart ? (
            <MoonChart data={allData.moonChart} />
          ) : (
            <div className="text-center py-10 text-gray-500">Moon chart not available</div>
          );

        case 'hora-chart':
          return allData.horaChart ? (
            <HoraChart data={allData.horaChart} />
          ) : (
            <div className="text-center py-10 text-gray-500">Hora chart not available</div>
          );

        case 'sun-chart':
          return allData.sunChart ? (
            <SunChart data={allData.sunChart} />
          ) : (
            <div className="text-center py-10 text-gray-500">Sun chart not available</div>
          );

        case 'dreshkan-chart':
          return allData.dreshkanChart ? (
            <DreshkanChart data={allData.dreshkanChart} />
          ) : (
            <div className="text-center py-10 text-gray-500">Dreshkan chart not available</div>
          );
          case 'dashamansha-chart':
            return allData.dashamanshaChart ? (
              <DashamanshaChart data={allData.dashamanshaChart} />
            ) : (
              <div className="text-center py-10 text-gray-500">Dashamansha chart not available</div>
            );

          case 'dwadasmansha-chart':
            return allData.dwadasmanshaChart ? (
              <DwadasmanshaChart data={allData.dwadasmanshaChart} />
            ) : (
              <div className="text-center py-10 text-gray-500">Dwadasmansha chart not available</div>
            );

          case 'trishamansha-chart':
            return allData.trishamanshaChart ? (
              <TrishamanshaChart data={allData.trishamanshaChart} />
            ) : (
              <div className="text-center py-10 text-gray-500">Trishamansha chart not available</div>
            );

          case 'shashtymansha-chart':
            return allData.shashtymanshaChart ? (
              <ShashtymanshaChart data={allData.shashtymanshaChart} />
            ) : (
              <div className="text-center py-10 text-gray-500">Shashtymansha chart not available</div>
            );
          case 'sadhe-sati':
            return allData.sadheSatiData ? (
              <SadheSati data={allData.sadheSatiData} />
            ) : (
              <div className="text-center py-10 text-gray-500">Sadhe Sati data not available</div>
            );

          case 'ashtak-varga':
            return allData.prastarakListData ? (
              <AshtakVarga data={allData.prastarakListData} />
            ) : (
              <div className="text-center py-10 text-gray-500">Ashtak Varga data not available</div>
            );

          case 'sarvashtak':
            return allData.sarvashtakaListData ? (
              <Sarvashtak data={allData.sarvashtakaListData} />
            ) : (
              <div className="text-center py-10 text-gray-500">Sarvashtak data not available</div>
            );

          case 'kp-birth-details':
            return allData.kpBirthdata ? (
              <KPBirthDetail data={allData.kpBirthdata} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP Birth details not available</div>
            );

          case 'kp-planetary-positions':
            return allData.kpPlanetData ? (
              <KPPlanetaryPosition data={allData.kpPlanetData} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP Planetary data not available</div>
            );

          case 'kp-cusps-details':
            return allData.cuspsData ? (
              <KPCuspsDetail data={allData.cuspsData} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP Cusps data not available</div>
            );
          case 'kp-birth-chart':
            return allData.kpBirthChart ? (
              <KPBirthChart data={allData.kpBirthChart} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP Birth chart not available</div>
            );

          case 'kp-cusps-chart':
            return allData.kpCuspsChart ? (
              <KPCuspsChart data={allData.kpCuspsChart} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP Cusps chart not available</div>
            );

          case 'kp-planet-significators':
            return allData.planetSignificatorsData ? (
              <KPPlanetSignificators data={allData.planetSignificatorsData} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP Planet Significators not available</div>
            );

          case 'kp-ruling-planets':
            return allData.rulingPlanetsData ? (
              <KPRulingPlanets data={allData.rulingPlanetsData} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP Ruling Planets not available</div>
            );

          case 'kp-house-significators':
            return allData.houseSignificatorsData ? (
              <KPHouseSignificators data={allData.houseSignificatorsData} />
            ) : (
              <div className="text-center py-10 text-gray-500">KP House Significators not available</div>
            );

          case 'ascendant-prediction':
            return allData.prediction ? (
              <AscendantPrediction data={allData.prediction} />
            ) : (
              <div className="text-center py-10 text-gray-500">Ascendant prediction not available</div>
            );

          case 'sign-prediction':
            return allData.prediction ? (
              <SignPrediction data={allData.prediction} />
            ) : (
              <div className="text-center py-10 text-gray-500">Sign prediction not available</div>
            );

          case 'planet-consideration':
            return allData.prediction ? (
              <PlanetConsideration data={allData.prediction} />
            ) : (
              <div className="text-center py-10 text-gray-500">Planet consideration not available</div>
            );

          case 'bhav-prediction':
            return allData.prediction ? (
              <BhavPrediction data={allData.prediction} />
            ) : (
              <div className="text-center py-10 text-gray-500">Bhav prediction not available</div>
            );

          case 'nakshatra-prediction':
            return allData.prediction ? (
              <NakshatraPrediction data={allData.prediction} />
            ) : (
              <div className="text-center py-10 text-gray-500">Nakshatra prediction not available</div>
            );




      default:
        return (
          <div className="bg-white rounded-lg shadow-md p-12 text-center">
            <div className="text-6xl mb-4">📊</div>
            <h3 className="text-2xl font-bold text-gray-700 mb-2 capitalize">
              {activeName.replace(/-/g, ' ')}
            </h3>
            <p className="text-gray-500">This section is under development</p>
          </div>
        );
    }
  };

  // ==========================================
  // 🔹 JSX RETURN
  // ==========================================

  return (
    <>
      <TopHeaderSection />

      {/* Kundli Header */}
      <section className="px-6 py-6 bg-gradient-to-r from-orange-50 via-white to-orange-50 border-b-2 border-secondary/30">
        <div className="max-w-7xl mx-auto flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="border-l-4 border-primary pl-4">
            <h1 className="text-2xl font-black text-primary capitalize">
              {kundliData?.name || 'Loading...'}
            </h1>
            <p className="text-sm text-gray-600 mt-1">{kundliData?.gender || '-'}</p>
          </div>

          <div className="space-y-1">
            <div className="flex items-center gap-3 text-sm font-medium text-gray-700">
              <span>📅 {kundliData ? formatDateFromString(kundliData.dob) : '-'}</span>
              <span>🕐 {kundliData ? formatTimeFromString(kundliData.tob) : '-'}</span>
            </div>
            <div className="text-sm text-gray-600">📍 {kundliData?.place || '-'}</div>
          </div>
        </div>
      </section>

      {/* Navigation Tabs */}
      <section className="bg-white border-b">
        <div className="max-w-7xl mx-auto">
          {/* Parent Tabs */}
          <div className="flex gap-8 px-6 pt-4 overflow-x-auto">
            {menuData.map((menu) => (
              <button
                key={menu.title}
                onClick={() => {
                  setActiveParent(menu.title);
                  setActiveName(menu.items[0].name);
                }}
                className={`pb-3 border-b-2 text-sm font-semibold whitespace-nowrap transition-all ${
                  activeParent === menu.title
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-primary'
                }`}
              >
                {menu.title}
              </button>
            ))}
          </div>

          {/* Child Tabs */}
          <div className="flex flex-wrap gap-2 px-6 py-4 bg-gray-50">
            {menuData
              .find((m) => m.title === activeParent)
              ?.items.map((item) => (
                <button
                  key={item.name}
                  onClick={() => handleChildClick(activeParent, item.name)}
                  className={`px-4 py-2 text-sm rounded-lg border transition-all ${
                    activeName === item.name
                      ? 'bg-primary text-white border-primary shadow-md'
                      : 'bg-white text-gray-600 border-gray-300 hover:border-primary hover:text-primary'
                  }`}
                >
                  {item.label}
                </button>
              ))}
          </div>
        </div>
      </section>

      {/* Content Section */}
      <section className="px-6 py-8 bg-gradient-to-b from-white to-orange-50 min-h-screen">
        <div className="max-w-7xl mx-auto">
          {renderContent()}
        </div>
      </section>
    </>
  );
};

export default KundliDetails;
